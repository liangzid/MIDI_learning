C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TEXT1
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Text1.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND SRC(.\Text1.SR
                    -C)

line level    source

   1          #include <REG51.H>
   2          #include <intRIns.h>
   3          #include <ABSACC.h>
   4          #include <math.h>
   5          #include <stdio.h>
   6          #include <stdlib.h>
   7          #define uint unsigned int 
   8          #define uchar unsigned char
   9          #define numLEDs 64
  10          #define N 5
  11          
  12          
  13          sfr AUXR =0x8E;
  14          sbit P10=P1^0;
  15          sbit P11=P1^1;
  16          //sbit P12=P1^2;
  17          sbit P13=P1^3;
  18          sbit WS2812 = P1^2;
  19          
  20          sbit cs=P1^6;
  21          sbit clk=P1^7;
  22          sbit key=P1^5;
  23          sbit dat=P1^4;
  24          
  25          
  26          unsigned char  buf_R[numLEDs] = { 0 };//??é??o′?
  27          unsigned char  buf_G[numLEDs] = { 0 };
  28          unsigned char  buf_B[numLEDs] = { 0 };
  29          void RGB_Set_Up();  //?í0??
  30          void RGB_Set_Down(); //?í1??
  31          void Delay1ms(uchar k);
  32          void SetPointColour(unsigned int num, unsigned char r, unsigned char g, unsigned char b);
  33          void SentPixelColor(unsigned char num,unsigned long c);
  34          void HAL_Delay(unsigned int t)
  35          {
  36   1              unsigned int x, y;
  37   1              for (x = 114; x>0; x--)
  38   1                      for (y = t; y>0; y--);
  39   1      }
  40          void ReSet()
  41          {
  42   1              uint i;
  43   1              for(i=0;i<64;i++)
  44   1              {
  45   2              SentPixelColor(i,0);
  46   2              }
  47   1      }
  48          
  49          
  50          //?′???óê±
  51          void Delay50us()                //@22.1184MHz
  52          {
  53   1              unsigned char i, j;
  54   1              _nop_();
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 2   

  55   1              _nop_();
  56   1              i = 2;
  57   1              j = 15;
  58   1              do
  59   1              {
  60   2                      while (--j);
  61   2              } while (--i);
  62   1      }
  63          // 高电平850ns 低电平400ns 误差150ns
  64          void RGB_Set_Up()
  65          {
  66   1              WS2812 = 1;
  67   1              //22.1184MHz
  68   1              _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  69   1              _nop_(); _nop_(); _nop_();// _nop_(); _nop_(); _nop_(); _nop_();
  70   1              WS2812 = 0;
  71   1      }
  72          //高电平400ns 低电平850ns 误差150ns
  73          void RGB_Set_Down()
  74          {
  75   1              WS2812 = 1;
  76   1              //22.1184MHz
  77   1              _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); //_nop_();
  78   1              WS2812 = 0;
  79   1      }
  80          
  81          //・￠?í24??êy?Y
  82          void Send_2811_24bits(unsigned char G8, unsigned char R8, unsigned char B8)
  83          {
  84   1              unsigned int n = 0;
  85   1              //・￠?íG8??
  86   1              for (n = 0; n<8; n++)
  87   1              {
  88   2                      G8 <<= n;
  89   2                      if (G8 & 0x80 == 0x80)
  90   2                      {
  91   3                              RGB_Set_Up();
  92   3                      }
  93   2                      else
  94   2                      {
  95   3                              RGB_Set_Down();
  96   3                      }
  97   2              }
  98   1              //・￠?íR8??
  99   1              for (n = 0; n<8; n++)
 100   1              {
 101   2                      R8 <<= n;
 102   2                      if (R8 & 0x80 == 0x80)
 103   2                      {
 104   3                              RGB_Set_Up();
 105   3                      }
 106   2                      else
 107   2                      {
 108   3                              RGB_Set_Down();
 109   3                      }
 110   2              }
 111   1              //・￠?íB8??
 112   1              for (n = 0; n<8; n++)
 113   1              {
 114   2                      B8 <<= n;
 115   2                      if (B8 & 0x80 == 0x80)
 116   2                      {
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 3   

 117   3                              RGB_Set_Up();
 118   3                      }
 119   2                      else
 120   2                      {
 121   3                              RGB_Set_Down();
 122   3                      }
 123   2              }
 124   1      }
 125          //?′????
 126          void RGB_Rst()
 127          {
 128   1              WS2812 = 0;
 129   1              Delay50us();
 130   1      }
 131          //°?24??êy?YGRB??×aRGB
 132          void Set_Colour(unsigned char r, unsigned char g, unsigned char b)
 133          {
 134   1              unsigned char i;
 135   1              for (i = 0; i<numLEDs; i++)
 136   1              {
 137   2                      buf_R[i] = r; //?o3?
 138   2                      buf_G[i] = g;
 139   2                      buf_B[i] = b;
 140   2              }
 141   1              for (i = 0; i<numLEDs; i++)
 142   1              {
 143   2                      Send_2811_24bits(buf_G[i], buf_R[i], buf_B[i]);//・￠?í??ê?
 144   2              }
 145   1      }
 146          //?3ò???μ???ê?μ???é?
 147          void SetPointColour(unsigned int num, unsigned char r, unsigned char g, unsigned char b)
 148          {
 149   1              unsigned char i;
 150   1              for (i = 0; i<numLEDs; i++)
 151   1              {
 152   2                      buf_R[num-1] = r;//?o3?
 153   2                      buf_G[num-1] = g;
 154   2                      buf_B[num-1] = b;
 155   2              }
 156   1              for (i = 0; i<numLEDs; i++)
 157   1              {
 158   2                      Send_2811_24bits(buf_G[i], buf_R[i], buf_B[i]);//・￠?í??ê?
 159   2              }
 160   1      }
 161          
 162          //颜色交换24位不拆分发
 163          
 164          void SetPixelColor(unsigned char num,unsigned long c)
 165          
 166          {
 167   1      
 168   1                unsigned char i;
 169   1      
 170   1                      for(i=0;i<numLEDs;i++)
 171   1      
 172   1                {
 173   2      
 174   2                                buf_R[num] = (unsigned char)(c>>16);
 175   2      
 176   2                                buf_G[num] = (unsigned char)(c>>8);
 177   2      
 178   2                                buf_B[num] = (unsigned char)(c);
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 4   

 179   2      
 180   2                      }
 181   1      
 182   1                      for(i=0;i<numLEDs;i++)
 183   1      
 184   1                      {
 185   2      
 186   2                              Send_2811_24bits(buf_G[i],buf_R[i],buf_B[i]);
 187   2      
 188   2                      }
 189   1      
 190   1      }
 191          //颜色交换24位不拆分发
 192          
 193          void SentPixelColor(unsigned char num,unsigned long c)
 194          
 195          {
 196   1      
 197   1                unsigned char i;
 198   1      
 199   1                      for(i=0;i<numLEDs;i++)
 200   1      
 201   1                {
 202   2      
 203   2                                buf_R[num-1] = (unsigned char)(c>>16);
 204   2      
 205   2                                buf_G[num-1] = (unsigned char)(c>>8);
 206   2      
 207   2                                buf_B[num-1] = (unsigned char)(c);
 208   2      
 209   2                      }
 210   1      
 211   1                      for(i=0;i<numLEDs;i++)
 212   1      
 213   1                      {
 214   2      
 215   2                              Send_2811_24bits(buf_G[i],buf_R[i],buf_B[i]);
 216   2      
 217   2                      }
 218   1      
 219   1      }
 220          
 221           
 222          
 223          //复位
 224          
 225          void PixelUpdate()
 226          
 227          {
 228   1      
 229   1              RGB_Rst();
 230   1      
 231   1      }
 232          
 233          //颜色
 234          
 235          unsigned long Color(unsigned char r, unsigned char g, unsigned char b)
 236          
 237          {
 238   1      
 239   1        return ((unsigned long)r << 16) | ((unsigned long)g <<  8) | b;
 240   1      
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 5   

 241   1      }
 242          
 243           
 244          
 245          //颜色算法
 246          
 247          unsigned long Wheel(unsigned char WheelPos)
 248          
 249          {
 250   1      
 251   1        WheelPos = 255 - WheelPos;
 252   1      
 253   1        if(WheelPos < 85) 
 254   1      
 255   1              {
 256   2      
 257   2          return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 258   2      
 259   2        }
 260   1      
 261   1        if(WheelPos < 170) {
 262   2      
 263   2          WheelPos -= 85;
 264   2      
 265   2          return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 266   2      
 267   2        }
 268   1      
 269   1        WheelPos -= 170;
 270   1      
 271   1        return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 272   1      
 273   1      }
 274          
 275           
 276          
 277          //彩虹
 278          
 279          void rainbow(unsigned int wait)
 280          
 281          {
 282   1      
 283   1        unsigned int i, j;
 284   1      
 285   1       
 286   1      
 287   1        for(j=0; j<2; j++) 
 288   1      
 289   1              {
 290   2      
 291   2          for(i=0; i<numLEDs; i++)
 292   2      
 293   2                      {
 294   3      
 295   3            SetPixelColor(i, Wheel((i+j) & 255));
 296   3      
 297   3          }
 298   2      
 299   2                      PixelUpdate();
 300   2      
 301   2          HAL_Delay(wait);
 302   2      
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 6   

 303   2        }
 304   1        ReSet();
 305   1        
 306   1      }
 307          
 308           
 309          
 310          //稍微不同的是，这使得彩虹均匀分布
 311          
 312          void rainbowCycle(unsigned int wait) 
 313          
 314          {
 315   1      
 316   1        unsigned int i, j;
 317   1      
 318   1       
 319   1      
 320   1        for(j=0;j<256*5;j++) 
 321   1      
 322   1              { // 5 cycles of all colors on wheel  车轮上所有颜色的5个循环
 323   2      
 324   2          for(i=0;i<numLEDs;i++) 
 325   2      
 326   2               {
 327   3      
 328   3           SetPixelColor(i, Wheel(((i * 256 / numLEDs) + j) & 255));
 329   3      
 330   3          }
 331   2      
 332   2                PixelUpdate();
 333   2      
 334   2          HAL_Delay (wait);
 335   2      
 336   2        }
 337   1      
 338   1      }
 339          
 340           
 341          
 342          //Theatre-style crawling lights.呼吸灯
 343          
 344          void theaterChase(unsigned long c, unsigned int wait) 
 345          
 346          {
 347   1      
 348   1              int j,q;
 349   1      
 350   1              unsigned int i;
 351   1      
 352   1        for (j=0; j<1; j++) 
 353   1      
 354   1              {  //do 10 cycles of chasing  做10个循环
 355   2      
 356   2          for (q=0; q < 3; q++) 
 357   2      
 358   2                      {
 359   3      
 360   3            for (i=0; i<numLEDs; i=i+3)
 361   3      
 362   3                              {
 363   4      
 364   4              SetPixelColor(i+q, c);    //turn every third pixel on  把每一个第三个像素
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 7   

 365   4      
 366   4            }
 367   3      
 368   3                              PixelUpdate();
 369   3      
 370   3            HAL_Delay(wait);
 371   3      
 372   3       
 373   3      
 374   3            for (i=0; i<numLEDs; i=i+3) 
 375   3      
 376   3                              {
 377   4      
 378   4             SetPixelColor(i+q, 0);        //turn every third pixel off   把每一个第三个像素关掉
 379   4      
 380   4            }
 381   3      
 382   3                              PixelUpdate();
 383   3      
 384   3          }
 385   2      
 386   2        }
 387   1      
 388   1      }
 389          
 390           
 391          
 392          //Theatre-style crawling lights with rainbow effect
 393          
 394          //带有彩虹效果的戏剧式爬行灯
 395          
 396          void theaterChaseRainbow(unsigned int wait) 
 397          
 398          {
 399   1      
 400   1              int j,q;
 401   1      
 402   1              unsigned int i;
 403   1      
 404   1        for (j=0; j < 1; j++) 
 405   1      
 406   1              {     // cycle all 256 colors in the wheel 在轮子上循环所有256色
 407   2      
 408   2          for (q=0; q < 3; q++)
 409   2      
 410   2                      {
 411   3      
 412   3            for (i=0; i < numLEDs; i=i+3) 
 413   3      
 414   3                              {
 415   4      
 416   4              SetPixelColor(i+q, Wheel( (i+j) % 255));    //turn every third pixel off 把每一个第三个像素
 417   4      
 418   4            }
 419   3      
 420   3            PixelUpdate();
 421   3      
 422   3       
 423   3      
 424   3            HAL_Delay(wait);
 425   3      
 426   3       
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 8   

 427   3      
 428   3            for (i=0; i < numLEDs; i=i+3)
 429   3      
 430   3                              {
 431   4      
 432   4              SetPixelColor(i+q, 0);        //turn every third pixel off  把每一个第三个像素关掉
 433   4      
 434   4            }
 435   3      
 436   3          }
 437   2      
 438   2        }
 439   1              ReSet();
 440   1      }
 441          
 442          // Fill the dots one after the other with a color
 443          //用一种颜色填充这些圆点
 444          void colorWipe(unsigned long c, unsigned int wait)
 445          
 446          {
 447   1      
 448   1              unsigned int i = 0;
 449   1      
 450   1              for (i = 0; i<numLEDs; i++)
 451   1      
 452   1              {
 453   2      
 454   2                      SetPixelColor(i, c);
 455   2      
 456   2                      PixelUpdate();
 457   2      
 458   2                      //HAL_Delay(wait);
 459   2      
 460   2              }
 461   1              ReSet();
 462   1      
 463   1      }
*** WARNING C280 IN LINE 444 OF TEXT1.C: 'wait': unreferenced local variable
 464          void zidingyi1()
 465          
 466          {
 467   1      
 468   1      
 469   1      
 470   1              while (1)
 471   1      
 472   1              {
 473   2      
 474   2                      rainbow(45);
 475   2      
 476   2                      rainbowCycle(40);
 477   2      
 478   2                      theaterChase(Color(0, 0, 255), 80); // Blue
 479   2      
 480   2                      theaterChase(Color(0, 255, 0), 80); // Blue
 481   2      
 482   2                      theaterChase(Color(255, 0, 0), 80); // Blue
 483   2      
 484   2                      theaterChaseRainbow(40);
 485   2      
 486   2                      colorWipe(255, 255);
 487   2      
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 9   

 488   2              }
 489   1      
 490   1      }
 491          //按下就亮 
 492          
 493          
 494          
 495          void LightEffect8(uint num)
 496          {
 497   1              SetPointColour(num, 255, 0, 0);
 498   1              Delay1ms(200);
 499   1              SetPointColour(num,255,255,255);
 500   1              Delay1ms(200);
 501   1              SetPointColour(num,0,0,255);
 502   1              Delay1ms(200);
 503   1              //SentPixelColor(num, 0);
 504   1              ReSet();
 505   1      }
 506          void LightEffect1_1(void)       //左上角第一个按键的灯效
 507          {
 508   1              int i, k;
 509   1              for (k = 0; k<8 * N; k = k + 8)         //连续N次颜色递进
 510   1              {
 511   2                      for (i = 0; i<8; i++)
 512   2                      {
 513   3                              SentPixelColor(i, Color(0, 0, i + k * 64 / (N)));        //第一行
 514   3                              SentPixelColor(i * 8, Color(0, 0, i + k * 64 / (N)));    //第一列
 515   3                      }
 516   2              }
 517   1              for (i = 0; i<8; i++)             //clear all
 518   1              {
 519   2                      SentPixelColor(i, 0);
 520   2                      SentPixelColor(i * 8, 0);
 521   2              }
 522   1      }
 523          void LightEffect1_8(void)                //右上角第一个按键的灯效
 524          {
 525   1              int i, k;
 526   1              for (k = 0; k<8 * N; k = k + 8)
 527   1              {
 528   2                      for (i = 0; i<8; i++)
 529   2                      {
 530   3                              SentPixelColor(7 - i, Color(i + k * 64 / (N), 0, 0));            //第一行
 531   3                              SentPixelColor(i * 8 + 7, Color(i + k * 64 / (N), 0, 0));        //最后一列
 532   3                      }
 533   2              }
 534   1              for (i = 0; i<8; i++)             //clear all
 535   1              {
 536   2                      SentPixelColor(7 - i, 0);
 537   2                      SentPixelColor(i * 8 + 7, 0);
 538   2              }
 539   1      }
 540          void LightEffect8_1(void)                //左下角第一个按键的灯效
 541          {
 542   1              int i, k;
 543   1              for (k = 0; k<8 * N; k = k + 8)
 544   1              {
 545   2                      for (i = 0; i<8; i++)
 546   2                      {
 547   3                              SentPixelColor(56 + i, Color(0, i + k * 64 / (N), 0));           //第一行
 548   3                              SentPixelColor((7 - i) * 8, Color(0, i + k * 64 / (N), 0));      //最后一列
 549   3                      }
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 10  

 550   2              }
 551   1              for (i = 0; i<8; i++)             //clear all
 552   1              {
 553   2                      SentPixelColor(56 + i, 0);
 554   2                      SentPixelColor((7 - i) * 8, 0);
 555   2              }
 556   1      }
 557          void LightEffect8_8(void)                //右下角第一个按键的灯效
 558          {
 559   1              int i, k;
 560   1              for (k = 0; k<8 * N; k = k + 8)
 561   1              {
 562   2                      for (i = 0; i<8; i++)
 563   2                      {
 564   3                              SentPixelColor(63 - i, Color(i + k * 64 / (N), 0, i + k * 64 / (N)));            //第一行       紫色
 565   3                              SentPixelColor((7 - i) * 8 + 7, Color(i + k * 64 / (N), 0, i + k * 64 / (N)));   //最后一列      紫色
 566   3                      }
 567   2              }
 568   1              for (i = 0; i<8; i++)             //clear all
 569   1              {
 570   2                      SentPixelColor(63 - i, 0);
 571   2                      SentPixelColor((7 - i) * 8 + 7, 0);
 572   2              }
 573   1      }
 574          int GetNum()
 575                  {
 576   1                      return rand() % 7;
 577   1              }
 578          //=========================================跟随音量产生震动的效果=========================================
             -====================
 579          void LightSunShineWithMusic(void)
 580          {
 581   1              //    纯白   大红   橙色    浅黄      浅绿      青色       蓝色     紫色     深蓝   
 582   1              // R  255   255    255     251      128       116      0        219     14
 583   1              // G  255    0     153     255      255       234      0         0      43
 584   1              // B  255    0     0        66       0        254      255      219     143
 585   1              //返回的是0-6之间的某一个数
 586   1              
 587   1      
 588   1              //需要：产生一个0-7的随机数的函数，
 589   1              int RandNumber;
 590   1              int i, j;
 591   1              unsigned int XuHao; //存储需要写入的灯的序号
 592   1              for (i = 0; i < 8; i++)
 593   1              {
 594   2                      RandNumber = GetNum() + 2;
 595   2                      for (j = 0; j < 8; j++)
 596   2                      {
 597   3                              XuHao = (7 - j) * 8 + i;//得到了那个灯的序号
 598   3                              if (j = RandNumber - 1)//最高的那个一定亮蓝色，用以区分
 599   3                              {
 600   4                                      SetPointColour(XuHao, 14, 43, 143);//最高点一定亮深蓝色
 601   4                              }
 602   3                              else
 603   3                              {
 604   4                                      if (j >= RandNumber)
 605   4                                      {
 606   5                                              SetPointColour(XuHao, 255, 255, 255);//纯白色
 607   5      
 608   5                                      }
 609   4                                      else
 610   4                                      {
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 11  

 611   5                                              switch (j)
 612   5                                              {
 613   6                                              case 0:SetPointColour(XuHao, 219, 0, 219); break;   //紫色
 614   6                                              case 1:SetPointColour(XuHao, 0, 0, 255); break;     //蓝色
 615   6                                              case 2:SetPointColour(XuHao, 116, 234, 254); break; //青色
 616   6                                              case 3:SetPointColour(XuHao, 128, 255, 0); break;   //浅绿
 617   6                                              case 4:SetPointColour(XuHao, 255, 153, 0); break;   //橙色
 618   6                                              case 5:SetPointColour(XuHao, 251, 255, 66); break;  //黄色
 619   6                                              case 6:SetPointColour(XuHao, 255, 0, 0); break;     //红色
 620   6                                              default:
 621   6                                                      break;
 622   6                                              }
 623   5                                      }
 624   4                              }
 625   3                      }
 626   2              }
 627   1      }
 628          void LightEffect2(unsigned char time, unsigned int fre)
 629          {
 630   1              uint i;
 631   1              double pertime = (double)time / fre;
 632   1              for (i = 0; i < fre; i++)
 633   1              {
 634   2                      LightSunShineWithMusic();
 635   2                      Delay1ms(pertime);
 636   2              }
 637   1      }
 638          void LightEffect1(unsigned char time, unsigned int j)
 639          {
 640   1              int i;
 641   1      unsigned char  R[6][64] = { 
 642   1              {
 643   1              000,000,000,000,000,000,000,000,
 644   1              000,255,255,000,000,255,255,000,
 645   1              255,255,255,255,255,255,255,255,
 646   1              255,255,255,255,255,255,255,255,
 647   1              255,255,255,255,255,255,255,255,
 648   1              000,255,255,255,255,255,000,000,
 649   1              000,000,255,255,255,255,000,000,
 650   1              000,000,000,255,255,000,000,000},
 651   1      
 652   1              {000,000,000,000,000,000,000,000,
 653   1              000,000,000,000,000,000,000,000,
 654   1              000,000,255,000,000,255,000,000,
 655   1              000,255,253,255,255,253,255,000,
 656   1              000,255,253,253,253,253,255,000,
 657   1              000,000,255,253,253,255,000,000,
 658   1              000,000,000,255,255,000,000,000,
 659   1              000,000,000,000,000,000,000,000},
 660   1              
 661   1              {000,000,000,000,000,000,000,000,
 662   1              000,000,000,053,000,000,000,000,
 663   1              000,000,053,060,053,000,000,000,
 664   1              000,053, 28,060,060,053,000,000,
 665   1              000,000,053, 28,060,060,053,000,
 666   1              000,000,000,053,28,053,000,000,
 667   1              000,000,000,000,053,000,000,000,
 668   1              000,000,000,000,000,000,000,000},
 669   1      
 670   1              {000,000,000,003,003,000,000,000,
 671   1              000,000,001,001,001,001,000,000,
 672   1              000,197,197,197,197,197,197,000,
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 12  

 673   1              254,254,254,254,254,254,254,254,
 674   1              000,197,197,197,197,197,197,000,
 675   1              000,000,001,001,001,001,000,000,
 676   1              000,000,000,003,003,000,000,000,
 677   1              000,000,000,000,000,000,000,000},
 678   1      
 679   1              {255,255,255,255,255,255,255,255,
 680   1              255,255,255,255,255,255,255,255,
 681   1              255,255,000,000,000,000,255,255,
 682   1              255,255,000,000,000,000,255,255,
 683   1              255,255,000,000,000,000,255,255,
 684   1              255,255,000,000,000,000,255,255,
 685   1              255,255,255,255,255,255,255,255,
 686   1              255,255,255,255,255,255,255,255},
 687   1              
 688   1              {000,000,000,000,000,000,000,000,
 689   1              000,000,003,003,003,003,000,000,
 690   1              000,003,242,233,233,221,003,000,
 691   1              000,003,233,242,221,233,003,000,
 692   1              000,003,233,221,242,233,003,000,
 693   1              000,003,221,233,233,242,003,000,
 694   1              000,000,003,003,003,003,000,000,
 695   1              000,000,000,000,000,000,000,000} 
 696   1      };
 697   1      
 698   1      
 699   1      unsigned char G[6][64] = {
 700   1              {000,000,000,000,000,000,000,000,
 701   1              000,000,000,000,000,000,000,000,
 702   1              000,000,000,000,000,000,000,000,
 703   1              000,000,128,000,000,128,000,000,
 704   1              000,000,128,128,128,128,000,000,
 705   1              000,000,000,128,128,000,000,000,
 706   1              000,000,000,000,000,000,000,000,
 707   1              000,000,000,000,000,000,000,000},
 708   1              
 709   1              {000,000,000,000,000,000,000,000,
 710   1              000,000,000,000,000,000,000,000,
 711   1              000,000,128,000,000,128,000,000,
 712   1              000,128,197,128,128,197,128,000,
 713   1              000,128,197,197,197,197,128,000,
 714   1              000,000,128,197,197,128,000,000,
 715   1              000,000,000,128,128,000,000,000,
 716   1              000,000,000,000,000,000,000,000},
 717   1              
 718   1              {000,000,000,255,000,000,000,000,
 719   1              000,000,255,202,255,000,000,000,
 720   1              000,255,202,185,202,255,000,000,
 721   1              255,202,203,185,185,202,255,000,
 722   1              000,255,202,203,185,185,202,255,
 723   1              000,000,255,202,203,202,255,000,
 724   1              000,000,000,255,202,255,000,000,
 725   1              000,000,000,000,255,000,000,000},
 726   1      
 727   1              {000,000,000,252,252,000,000,000,
 728   1              000,000,254,254,254,254,000,000,
 729   1              000,254,254,254,254,254,254,000,
 730   1              166,166,166,166,166,166,166,166,
 731   1              000,254,254,254,254,254,254,000,
 732   1              000,000,254,254,254,254,000,000,
 733   1              000,000,000,252,252,000,000,000,
 734   1              000,000,000,000,000,000,000,000},
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 13  

 735   1      
 736   1              {128,128,128,128,128,128,128,128,
 737   1              128,255,255,255,255,255,255,128,
 738   1              128,255,255,255,255,255,255,128,
 739   1              128,255,255,255,255,255,255,128,
 740   1              128,255,255,255,255,255,255,128,
 741   1              128,255,255,255,255,255,255,128,
 742   1              128,255,255,255,255,255,255,128,
 743   1              128,128,128,128,128,128,128,128},
 744   1              
 745   1              {000,000,032,032,032,032,000,000,
 746   1              000,032,252,252,252,252,032,000,
 747   1              032,252,128,233,233, 38,252,032,
 748   1              032,252,233,128, 38,233,252,032,
 749   1              032,252,233, 38,128,233,252,032,
 750   1              032,252, 38,233,233,128,252,032,
 751   1              000,032,252,252,252,252,032,000,
 752   1              000,000,032,032,032,032,000,000} 
 753   1      };
 754   1      unsigned char B[6][64] = { 
 755   1              {000,000,000,000,000,000,000,000,
 756   1              000,000,000,000,000,000,000,000,
 757   1              000,000,128,000,000,128,000,000,
 758   1              000,128,192,128,128,192,128,000,
 759   1              000,128,192,192,192,192,128,000,
 760   1              000,000,128,192,192,128,000,000,
 761   1              000,000,000,128,128,000,000,000,
 762   1              000,000,000,000,000,000,000,000},
 763   1      
 764   1              {000,000,000,000,000,000,000,000,
 765   1              000,000,000,000,000,000,000,000,
 766   1              000,000,000,000,000,000,000,000,
 767   1              000,000,066,000,000,066,000,000,
 768   1              000,000,066,066,066,066,000,000,
 769   1              000,000,000,066,066,000,000,000,
 770   1              000,000,000,000,000,000,000,000,
 771   1              000,000,000,000,000,000,000,000},
 772   1              
 773   1              {000,000,000,000,000,000,000,000,
 774   1              000,000,000, 98,000,000,000,000,
 775   1              000,000, 98,196,98,000,000,000,
 776   1              000, 98,227,196,196,98,000,000,
 777   1              000,000, 98,227,196,196,98,000,
 778   1              000,000,000, 98,227,98,000,000,
 779   1              000,000,000,000, 98,000,000,000,
 780   1              000,000,000,000,000,000,000,000},
 781   1      
 782   1              {000,000,000,152,152,000,000,000,
 783   1              000,000,033,033,033,033,000,000,
 784   1              000,001,001,001,001,001,001,000,
 785   1              001,001,001,001,001,001,001,001,
 786   1              001,001,001,001,001,001,001,001,
 787   1              000,001,001,001,001,001,001,000,
 788   1              000,000,033,033,033,033,000,000,
 789   1              000,000,000,152,152,000,000,000},
 790   1      
 791   1              {000,000,000,000,000,000,000,000,
 792   1              000,000,000,000,000,000,000,000,
 793   1              000,000,000,000,000,000,000,000,
 794   1              000,000,000,255,255,000,000,000,
 795   1              000,000,000,255,255,000,000,000,
 796   1              000,000,000,000,000,000,000,000,
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 14  

 797   1              000,000,000,000,000,000,000,000,
 798   1              000,000,000,000,000,000,000,000},
 799   1      
 800   1              {000,000,255,255,255,255,000,000,
 801   1              000,255,103,103,103,103,255,000,
 802   1              255,103,013,022,022,034,103,255,
 803   1              255,103,022,013,034,022,103,255,
 804   1              255,103,022,034,013,022,103,255,
 805   1              255,103,034,022,022,013,103,255,
 806   1              000,255,103,103,103,103,255,000,
 807   1              000,000,255,255,255,255,000,000} 
 808   1      };
 809   1      
 810   1      for (i = 0; i<63; i++) {
 811   2              SetPointColour(i, 0, 0, 0);
 812   2              SetPointColour(i, R[j][i], G[j][i], B[j][i]);
 813   2              HAL_Delay(time);
 814   2      }
 815   1              ReSet();
 816   1                                              }
 817          /*
 818          void LightEffect1111(unsigned char time, unsigned int j)
 819          {
 820                  int i;
 821                  uchar R1[]={000,000,000,000,000,000,000,000,    
 822                        000,006,006,000,000,006,006,000,
 823                                006,121,121,006,006,121,121,006,
 824                        006,121,29,121,121,29,121,006,                                                                    
 825                        006,121,29,29,29,121,121,006,
 826                                000,006,121,29,29,121,006,000,
 827                        000,000,006,121,121,006,000,000,
 828                        000,000,000,006,006,000,000,000};
 829                  uchar G1[]={000,000,000,000,000,000,000,000,    
 830                        000,249,249,000,000,249,249,000,
 831                                249,001,001,249,249,001,001,249,
 832                        249,001,167,001,001,167,001,249,                                                                  
 833                        249,001,167,167,167,167,001,249,
 834                                000,249,001,167,167,001,249,000,
 835                        000,000,249,001,001,249,000,000,
 836                        000,000,000,249,249,000,000,000};
 837                  uchar B1[]={000,000,000,000,000,000,000,000,    
 838                        000,242,242,000,000,242,242,000,
 839                                242,254,254,242,242,254,254,242,
 840                        242,254,226,254,254,226,254,242,                                                                  
 841                        242,254,226,226,226,226,254,242,
 842                                000,242,254,226,226,254,242,000,
 843                        000,000,242,254,254,242,000,000,
 844                        000,000,000,242,242,000,000,000}; //large heart  blue purple      
 845          
 846                  uchar R2[]={000,000,000,000,000,000,000,000,    
 847                        000,255,255,000,000,255,255,000,
 848                                255,255,255,255,255,255,255,255,
 849                        255,255,255,255,255,255,255,255,                                                                  
 850                        255,255,255,255,255,255,255,255,
 851                                000,255,255,255,255,255,000,000,
 852                        000,000,255,255,255,255,000,000,
 853                        000,000,000,255,255,000,000,000};
 854                  uchar G2[]={000,000,000,000,000,000,000,000,    
 855                        000,128,128,000,000,128,128,000,
 856                                128,128,128,128,128,128,128,128,
 857                        128,128,128,128,128,128,128,128,                                                                  
 858                        128,128,128,128,128,128,128,128,
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 15  

 859                                000,128,128,128,128,128,128,000,
 860                        000,000,128,128,128,128,000,000,
 861                        000,000,000,128,128,000,000,000};
 862                  uchar B2[]={000,000,000,000,000,000,000,000,    
 863                        000,000,000,000,000,000,000,000,
 864                                000,000,000,000,000,000,000,000,
 865                        000,000,000,000,000,000,000,000,                                                                  
 866                        000,000,000,000,000,000,000,000,
 867                                000,000,000,000,000,000,000,000,
 868                        000,000,000,000,000,000,000,000,
 869                        000,000,000,000,000,000,000,000};  //large heart  orange
 870                  
 871                  uchar R3[]={000,000,000,000,000,000,000,000     ,
 872                        000,000,255,000,000,000,255,000,
 873                                000,255,000,255,000,255,000,255,
 874                        000,000,000,000,000,000,000,000           ,                                                       
 875                        000,000,000,255,000,255,000,000,
 876                                000,000,000,000,255,000,000,000,
 877                        000,000,000,000,000,000,000,000,
 878                        000,000,000,000,000,000,000,000}; 
 879                  uchar G3[]={000,000,000,000,000,000,000,000     ,
 880                        000,000,255,000,000,000,255,000,
 881                                000,255,000,255,000,255,000,255,
 882                        000,000,000,000,000,000,000,000           ,                                                       
 883                        000,000,000,255,000,255,000,000,
 884                                000,000,000,000,255,000,000,000,
 885                        000,000,000,000,000,000,000,000,
 886                        000,000,000,000,000,000,000,000}; 
 887                  uchar B3[]={000,000,000,000,000,000,000,000,    
 888                        000,000,000,000,000,000,000,000  ,
 889                                000,000,000,000,000,000,000,000,
 890                        000,000,000,000,000,000,000,000                           ,                                       
 891                        000,000,000,000,000,000,000,000,
 892                                000,000,000,000,000,000,000,000,
 893                        000,000,000,000,000,000,000,000,
 894                        000,000,000,000,000,000,000,000};   //笑脸
 895          
 896          
 897                  uchar R4[]={255,000,000,000,000,000,000,255,    
 898                        000,255,000,000,000,000,255,000,
 899                                000,000,255,000,000,255,000,000,
 900                        000,000,000,146,146,000,000,000                           ,                                       
 901                        000,000,000,146,146,000,000,000,
 902                                000,000,255,000,000,255,000,000,
 903                        000,255,000,000,000,000,255,000,
 904                        255,000,000,000,000,000,000,255}; 
 905                  uchar G4[]={000,000,000,000,000,000,000,000,    
 906                        000,000,000,000,000,000,000,000,
 907                                000,000,000,000,000,000,000,000,
 908                        000,000,000,036,036,000,000,000                           ,                                       
 909                        000,000,000,036,036,000,000,000,
 910                                000,000,000,000,000,000,000,000,
 911                        000,000,000,000,000,000,000,000,
 912                        000,000,000,000,000,000,000,000}; 
 913                  uchar B4[]={128,000,000,000,000,000,000,128,    
 914                        000,128,000,000,000,000,128,000,
 915                                000,000,128,000,000,128,000,000,
 916                        000,000,000,219,219,000,000,000                           ,                                       
 917                        000,000,000,219,219,000,000,000,
 918                                000,000,128,000,000,128,000,000,
 919                        000,128,000,000,000,000,128,000,
 920                        128,000,000,000,000,000,000,128};    //“X图案
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 16  

 921          
 922                  uchar R5[]={064,000,064,000,000,064,064,064,    
 923                        064,000,064,000,000,064,000,064,
 924                                064,064,064,000,000,064,064,064,
 925                        000,000,000,242,242,000,000,000                           ,                                       
 926                        000,000,000,242,242,000,000,000,
 927                                064,064,064,000,000,064,064,064,
 928                        064,000,064,000,000,064,000,064,
 929                        064,064,064,000,000,064,064,064}; 
 930                  uchar G5[]={064,064,064,000,000,064,064,064,    
 931                        064,000,064,000,000,064,000,064,
 932                                064,064,064,000,000,064,064,064,
 933                        000,000,000,064,064,000,000,000                           ,                                       
 934                        000,000,000,064,064,000,000,000,
 935                                064,064,064,000,000,064,064,064  ,
 936                        064,000,064,000,000,064,000,064,
 937                        064,000,064,000,000,064,064,064}; 
 938                  uchar B5[]={064,000,064,000,000,064,064,064,    
 939                        064,000,064,000,000,064,000,064,
 940                                064,064,064,000,000,064,064,064,
 941                        000,000,000,126,126,000,000,000                           ,                                       
 942                        000,000,000,126,126,000,000,000,
 943                                064,064,064,000,000,064,064,064,
 944                        064,000,064,000,000,064,000,064  ,
 945                        064,064,064,000,000,064,000,064};   //五口图案
 946          
 947                  uchar R6[]={000,000,000,000,000,000,000,000,    
 948                        000,000,000,000,000,000,000,000,
 949                                000,000,000,000,000,000,000,000,
 950                        000,000,000,000,000,000,000,000                           ,                                       
 951                        000,000,000,000,000,000,000,000,
 952                                000,000,000,000,000,000,000,000,
 953                        000,000,000,000,000,000,000,000,
 954                        000,000,000,000,000,000,000,000}; 
 955                  uchar G6[]={000,000,000,000,000,000,000,000,    
 956                        000,000,000,000,000,000,000,000,
 957                                000,000,000,000,000,000,000,000,
 958                                                    000,000,000,000,000,000,000,000,                                                                      
 959                        000,000,000,000,000,000,000,000,
 960                                000,000,000,000,000,000,000,000,
 961                        000,000,000,000,000,000,000,000,
 962                        000,000,000,000,000,000,000,000}; 
 963                  uchar B6[]={000,000,000,000,000,000,000,000,    
 964                        000,000,000,000,000,000,000,000,
 965                                000,000,000,000,000,000,000,000,
 966                        000,000,000,000,000,000,000,000                           ,                                       
 967                        000,000,000,000,000,000,000,000,
 968                                000,000,000,000,000,000,000,000,
 969                        000,000,000,000,000,000,000,000,
 970                        000,000,000,000,000,000,000,000};
 971                  uchar R[5][64]={R1,R2,R3,R4,R5};
 972                  uchar G[5][64]={G1,G2,G3,G4,G5};
 973                  uchar B[5][64]={B1,B2,B3,B4,B5};
 974                  
 975          for (i = 0; i<63; i++) {
 976                  SetPointColour(i, 0, 0, 0);
 977                  SetPointColour(i, R[j][i], G[j][i], B[j][i]);
 978                  HAL_Delay(time);
 979          }
 980                                                  }
 981          */
 982          
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 17  

 983          void LightControll(uchar keyvalue)
 984                                                          {
 985   1                                                              switch (keyvalue)
 986   1                                                              {
 987   2                                                              case '\x00':LightEffect8_1(); break;
 988   2                                                              case '\x01':theaterChase(Color(0, 0, 255), 10); break;
 989   2                                                              case '\x02':theaterChase(Color(0, 0, 255), 10); break;
 990   2                                                              case '\x03':LightEffect1(20,0); break;
 991   2                                                              case '\x04': LightEffect1(20,1);break;
 992   2                                                              case '\x05':theaterChase(Color(0, 0, 255), 10); break;
 993   2                                                              case '\x06':theaterChase(Color(0, 0, 255), 10); break;
 994   2                                                              case '\x07':LightEffect1_1(); break;
 995   2                                                              case '\x08':rainbow(40); break;
 996   2                                                              case '\t':LightEffect8(9); break;
 997   2                                                              case '\n':LightEffect8(10); break;
 998   2                                                              case '\x0b':LightEffect8(11); break;
 999   2                                                              case '\x0c':LightEffect8(12); break;
1000   2                                                              case '\r':LightEffect8(13); break;
1001   2                                                              case '\x0e':LightEffect8(14); break;
1002   2                                                              case '\x0f':theaterChaseRainbow(40); break;
1003   2                                                              case '\x10':rainbow(40); break;
1004   2                                                              case '\x11':LightEffect8(17); break;
1005   2                                                              case '\x12':LightEffect8(18); break;
1006   2                                                              case '\x13':LightEffect8(19); break;
1007   2                                                              case '\x14':LightEffect8(20); break;
1008   2                                                              case '\x15':LightEffect8(21); break;
1009   2                                                              case '\x16':LightEffect8(22); break;
1010   2                                                              case '\x17':theaterChaseRainbow(40); break;
1011   2                                                              case '\x18':LightEffect1(20,2); break;
1012   2                                                              case '\x19':LightEffect8(25); break;
1013   2                                                              case '\x1a':LightEffect1(20, 0); break;
1014   2                                                              case '\x1b':LightEffect1(10, 1); break;
1015   2                                                              case '\x1c':LightEffect1(10, 2); break;
1016   2                                                              case '\x1d':LightEffect1(20, 3); break;
1017   2                                                              case '\x1e':LightEffect8(30); break;
1018   2                                                              case '\x1f':LightEffect1(20,3); break;
1019   2                                                              case ' ':LightEffect1_1(); break;
1020   2                                                              case '!':LightEffect8(33); break;
1021   2                                                              case '"':LightEffect1(20, 4); break;
1022   2                                                              case '#':LightEffect1(10, 5); break;
1023   2                                                              case '$':LightEffect1(10, 6); break;
1024   2                                                              case '%':LightEffect1(20, 7); break;
1025   2                                                              case '&':LightEffect8(38); break;
1026   2                                                              case '\'':LightEffect1(20,4); break;
1027   2                                                              case '(':rainbow(40); break;
1028   2                                                              case ')':LightEffect8(41); break;
1029   2                                                              case '*':LightEffect8(42); break;
1030   2                                                              case '+':LightEffect8(43); break;
1031   2                                                              case ',':LightEffect8(44); break;
1032   2                                                              case '-':LightEffect8(45); break;
1033   2                                                              case '.':LightEffect8(46); break;
1034   2                                                              case '/':theaterChaseRainbow(40); break;
1035   2                                                              case '0':rainbow(40); break;
1036   2                                                              case '1':LightEffect8(49); break;
1037   2                                                              case '2':LightEffect8(50); break;
1038   2                                                              case '3':LightEffect8(51); break;
1039   2                                                              case '4':LightEffect8(52); break;
1040   2                                                              case '5':LightEffect8(53); break;
1041   2                                                              case '6':LightEffect8(54); break;
1042   2                                                              case '7':theaterChaseRainbow(40); break;
1043   2                                                              case '8':LightEffect8_8(); break;
1044   2                                                              case '9':colorWipe(255, 255); break;
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 18  

1045   2                                                              case ':':colorWipe(255, 255); break;
1046   2                                                              case ';':LightEffect1(20,5); break;
1047   2                                                              case '<':LightEffect1(20,4); break;
1048   2                                                              case '=':colorWipe(255, 255); break;
1049   2                                                              case '>':colorWipe(255, 255); break;
1050   2                                                              case '?':LightEffect1_8(); break;
1051   2                                                              default:break;
1052   2                                                              }
1053   1                                                      }
1054          
1055          
1056          
1057          
1058          
1059          
1060          
1061          //===================================利用7279来进行键盘的读取处理=========================================
             -==
1062          
1063          
1064          //=========================================================================================
1065          void long_delay(void)
1066             {
1067   1         uchar i;
1068   1         for (i=0;i<0x30;i++){;}    //00110000
1069   1         }
1070          
1071          void short_delay(void)
1072             {
1073   1         uchar i;
1074   1         for (i=0;i<8;i++){;}
1075   1         }            
1076          
1077          
1078          //单片机向7279发送数据
1079          void SendByteTo7279(uchar out_byte)
1080             {
1081   1         uchar i;
1082   1         cs = 0; long_delay();//片选信号为低电平有效
1083   1         for (i=0;i<8;i++)
1084   1            {
1085   2                if (out_byte & 0x80) { dat = 1; } //10000000
1086   2                else { dat = 0; }                        //读取每一位的数据存放在dat中
1087   2                //相当于产生时钟信号，制造了一个下降沿,从而进行数据的发送
1088   2                clk = 1; short_delay(); clk = 0; short_delay();
1089   2                out_byte = out_byte*2;
1090   2            }
1091   1         dat = 0;
1092   1         }
1093             
1094          //7279向单片机发送数据
1095          unsigned char ReceivedByteToMCU()
1096          {
1097   1              unsigned char i, in_byte;
1098   1              dat = 1;   
1099   1              long_delay(); in_byte = 0;
1100   1              for (i=0;i<8;i++)
1101   1              {
1102   2                      clk = 1; short_delay(); in_byte = in_byte*2;
1103   2                      if (dat) { in_byte = in_byte|0x01; }
1104   2                      clk = 0; short_delay();
1105   2              }
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 19  

1106   1              dat = 0; 
1107   1              return(in_byte);
1108   1      }
1109          
1110          // 读取键值
1111          unsigned char key_read()
1112          {
1113   1              SendByteTo7279(0x15); //15H是7279中的读键盘数据指令
1114   1              return(ReceivedByteToMCU());
1115   1      }
1116          
1117          //======================
1118                  
1119          
1120          void delayms(uint x)
1121          {
1122   1              uint i;
1123   1              uint j;
1124   1              for(i=0;i<x;i++)
1125   1                      for(j=0;j<335;j++)
1126   1                              {;}
1127   1      }
1128          void SendByte2Computer(uchar dataa)
1129          {
1130   1              SBUF=dataa;
1131   1              while(TI==0);
1132   1              
1133   1              TI=0;//软件复位
1134   1      }
1135          void SendBytes2Computer(unsigned char * datas)
1136          {
1137   1              //int i;
1138   1              uchar* dd=datas;
1139   1              while( *dd != '\0')
1140   1              //for(i=0;i<3;i++)
1141   1              {
1142   2                      SendByte2Computer(*dd);
1143   2                      dd+=1;
1144   2                      //SendByte(datas[i]);
1145   2                      
1146   2                      
1147   2              }
1148   1      }
1149          
1150          void UartInit(void)             //9600bps@18.432MHz
1151          {
1152   1              SCON = 0x50;            //8位数据,可变波特率
1153   1              AUXR |= 0x40;           //定时器1时钟为Fosc,即1T
1154   1              AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
1155   1              TMOD &= 0x0F;           //设定定时器1为16位自动重装方式
1156   1              TL1 = 0x20;             //设定定时初值
1157   1              TH1 = 0xFE;             //设定定时初值
1158   1              ET1 = 0;                //禁止定时器1中断
1159   1              TR1 = 1;                //启动定时器1
1160   1      }
1161          
1162          
1163          
1164          void Delay1ms(uchar k)          //@18.432MHz
1165          {
1166   1              unsigned char i, j,mm;
1167   1              for(mm=0;mm<k;mm++){
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 20  

1168   2              _nop_();
1169   2              _nop_();
1170   2              i = 22;
1171   2              j = 128;
1172   2              do
1173   2              {
1174   3                      while (--j);
1175   3              } while (--i);
1176   2      }}
1177          
1178          
1179          
1180          
1181          void main()
1182          {
1183   1      unsigned char KeyValue;
1184   1      UartInit();
1185   1      
1186   1      //rainbowCycle(40);
1187   1      while(1)
1188   1      {
1189   2              
1190   2              //RGB_Set_Up();
1191   2              //RGB_Set_Down();
1192   2              //SetPointColour(2,255,0,0);
1193   2              
1194   2              KeyValue=key_read();
1195   2              SendByte2Computer(KeyValue);
1196   2              LightControll(KeyValue);
1197   2              Delay1ms(100);
1198   2      
1199   2      
1200   2      
1201   2      }
1202   1      
1203   1      
1204   1      
1205   1      }
1206          
1207          //适用于12MHz
1208          //R7相当于dataa,R6用来进行循环，RLC负责移位
1209          void ws2812asm(unsigned char dataa)
1210          {
1211   1      #pragma asm
1212   1              MOV A, R7       
1213   1              MOV R6, #0x08   
1214   1      WS2812LOOP:
1215   1              SETB P3.7
1216   1              RLC A
1217   1              MOV P3.7, C
1218   1              NOP
1219   1              CLR P3.7
1220   1              DJNZ R6, WS2812LOOP
1221   1      #pragma endasm
1222   1      }
*** WARNING C280 IN LINE 1209 OF TEXT1.C: 'dataa': unreferenced local variable
1223          
1224          
1225          
1226          
1227          
1228          
C51 COMPILER V9.01   TEXT1                                                                 01/10/2019 19:42:25 PAGE 21  



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4544    ----
   CONSTANT SIZE    =   1152    ----
   XDATA SIZE       =    192    1253
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
